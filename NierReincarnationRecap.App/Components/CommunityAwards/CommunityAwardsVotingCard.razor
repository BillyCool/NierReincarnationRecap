@using NierReincarnationRecap.App.Components.Awards
@using NierReincarnationRecap.App.Services
@using NierReincarnationRecap.Model.ViewModel
@using NierReincarnationRecap.Model.Enums
@inject IUserPreferencesService UserPreferencesService

<MudItem xs="12">
    <MudCard Class="border-double border-4 " Outlined Square Style="border-color: #b2b0a1; background: radial-gradient(circle, #5f574d, #38322f)">
        <MudCardHeader Class="justify-center">
            <MudText Typo="Typo.subtitle2">@(AwardIndex + 1 + "/" + AwardCount)</MudText>
        </MudCardHeader>
        <MudCardContent Class="pb-10 px-10">
            <MudText Typo="Typo.h4" GutterBottom="true" Class="border-b-4" Align="Align.Center">@Award.Category.GetDisplayName()</MudText>
            @for (int i = 0; i < Award.OptionList.Count; i++)
            {
                var isHighlighted = IsVotingEnabled ? i == SelectedOption : Award.Winners?.Contains(i) == true;
                var headingText = isHighlighted ? (IsVotingEnabled ? "Selected" : "Winner") : default;

                <VotingOption
                    AwardOption="Award.OptionList[i]"
                    AwardOptionIndex=i
                    IsHighlited=@isHighlighted
                    HeadingText=@headingText
                    OnOptionSelected="OptionSelected" />
            }
        </MudCardContent>
    </MudCard>
</MudItem>

@code {
    [Parameter][EditorRequired] public required Award Award { get; set; }

    [Parameter][EditorRequired] public required int AwardIndex { get; set; }

    [Parameter][EditorRequired] public required int AwardCount { get; set; }

    [Parameter] public required bool IsVotingEnabled { get; set; }

    [CascadingParameter] public UserPreferences UserPreferences { get; set; } = null!;

    public int? SelectedOption { get; set; }

    protected override void OnInitialized()
    {
        SetSelectedOption();
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        SetSelectedOption();
        base.OnParametersSet();
    }

    private void SetSelectedOption()
    {
        SelectedOption = null;
        if (UserPreferences.Votes.TryGetValue(Award.Category, out int selectedOption))
        {
            SelectedOption = selectedOption;
        }
    }

    private void OptionSelected(int option)
    {
        if (SelectedOption == option)
        {
            SelectedOption = null;

            if (UserPreferences.Votes.ContainsKey(Award.Category))
            {
                UserPreferences.Votes.Remove(Award.Category);
            }
        }
        else
        {
            SelectedOption = option;

            if (UserPreferences.Votes.ContainsKey(Award.Category))
            {
                UserPreferences.Votes[Award.Category] = option;
            }
            else
            {
                UserPreferences.Votes.Add(Award.Category, option);
            }
        }
        UserPreferencesService.SaveUserPreferences(UserPreferences);
        StateHasChanged();
    }
}
